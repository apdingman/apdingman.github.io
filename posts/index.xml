<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Adam Dingman</title><link>https://apdingman.github.io/posts/</link><description>Recent content in Posts on Adam Dingman</description><image><url>https://apdingman.github.io/images/profile-photo.jpg</url><link>https://apdingman.github.io/images/profile-photo.jpg</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Feb 2023 00:00:00 -0500</lastBuildDate><atom:link href="https://apdingman.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy an AWS Budget using Pulumi</title><link>https://apdingman.github.io/posts/pulumi-aws-budgets/</link><pubDate>Tue, 07 Feb 2023 00:00:00 -0500</pubDate><guid>https://apdingman.github.io/posts/pulumi-aws-budgets/</guid><description>What is Pulumi? Pulumi is yet another Infrastructure as Code (IaC) tool for deploying infrastructure using declaritive language which offers you the ability to pick your language of choice amongst TypeScript, JavaScript, Python, Go, .NET, Java, and YAML to define your infrastructure.
How am I using Pulumi? I really wanted a quick and easy means to get a feel for the basic structure of a Pulumi project and to get a feel for the CLI.</description></item><item><title>Continuous Delivery vs. Continuous Deployment</title><link>https://apdingman.github.io/posts/continuous-delivery-deployment/</link><pubDate>Wed, 01 Feb 2023 21:00:15 -0500</pubDate><guid>https://apdingman.github.io/posts/continuous-delivery-deployment/</guid><description>The term CI/CD gets used a lot to describe how to modernize the Software Delivery Lifecycle (SDLC). While there&amp;rsquo;s usually clear understanding on what CI - Continuous Integration means, that clarity isn&amp;rsquo;t always present surrounding the CD part.
The reason? CD can have two similar, but distinct meanings - Continuous Delivery or Continuous Deployment.
Comparison Continuous Delivery Through the Continuous Integration process one or more artifacts are generated that can be used to deploy infrastructure and application code.</description></item><item><title>Secure AWS Account Root User with U2F Keys</title><link>https://apdingman.github.io/posts/root-user-u2f/</link><pubDate>Thu, 17 Nov 2022 22:06:15 -0500</pubDate><guid>https://apdingman.github.io/posts/root-user-u2f/</guid><description>The AWS Account Root User is the identity that has complete access to all AWS services and resources in an AWS account. The scenarios that require you to use the root user are pretty sparse, so it&amp;rsquo;s good practice to secure the accounts with Multi-Factor Authentication (MFA), store the credentials in a password manager (also protected by MFA), and create named IAM users for any of your AWS account administrative needs.</description></item><item><title>3 Reasons why you should use Distribution Lists for the AWS Account Root User</title><link>https://apdingman.github.io/posts/aws-distribution-lists/</link><pubDate>Tue, 12 Apr 2022 00:00:00 -0500</pubDate><guid>https://apdingman.github.io/posts/aws-distribution-lists/</guid><description>The AWS Account Root User is the identity that has complete access to all AWS services and resources in an AWS account. If you spin up a new account, it’s probably first instinct to just slap your johndoe@companyxyz.com email address as the root user account and move on, but maybe that’s not the best idea.
The List Here are the 3 reasons why should use distribution lists for AWS account root user:</description></item><item><title>Resource Level AWS IoT Logging</title><link>https://apdingman.github.io/posts/resource-level-iot-logging/</link><pubDate>Sun, 10 Apr 2022 22:06:15 -0500</pubDate><guid>https://apdingman.github.io/posts/resource-level-iot-logging/</guid><description>TL;DR: AWS recently announced the ability to configure log levels by client ID, source IP, or principal ID. See how to do it here.
Are you managing a fleet of devices on AWS IoT Core? If so, you likely know that the CloudWatch log group AWSIotLogsV2 can be your best friend for troubleshooting connectivity issues between devices and the IoT core broker. Scraping through logs in this log group can highlight some key information about the successes/failures of your device’s connectivity like seen in Figure 1.</description></item></channel></rss>