<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Adam Dingman</title><link>https://apdingman.github.io/</link><description>Recent content on Adam Dingman</description><image><url>https://apdingman.github.io/images/profile-photo.jpg</url><link>https://apdingman.github.io/images/profile-photo.jpg</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Nov 2022 22:06:15 -0500</lastBuildDate><atom:link href="https://apdingman.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Secure AWS Account Root User with U2F Keys</title><link>https://apdingman.github.io/posts/root-user-u2f/</link><pubDate>Thu, 17 Nov 2022 22:06:15 -0500</pubDate><guid>https://apdingman.github.io/posts/root-user-u2f/</guid><description>The AWS Account Root User is the identity that has complete access to all AWS services and resources in an AWS account. The scenarios that require you to use the root user are pretty sparse, so it&amp;rsquo;s good practice to secure the accounts with Multi-Factor Authentication (MFA), store the credentials in a password manager (also protected by MFA), and create named IAM users for any of your AWS account administrative needs.</description></item><item><title>Resource Level AWS IoT Logging</title><link>https://apdingman.github.io/posts/resource-level-iot-logging/</link><pubDate>Sun, 10 Apr 2022 22:06:15 -0500</pubDate><guid>https://apdingman.github.io/posts/resource-level-iot-logging/</guid><description>TL;DR: AWS recently announced the ability to configure log levels by client ID, source IP, or principal ID. See how to do it here.
Are you managing a fleet of devices on AWS IoT Core? If so, you likely know that the CloudWatch log group AWSIotLogsV2 can be your best friend for troubleshooting connectivity issues between devices and the IoT core broker. Scraping through logs in this log group can highlight some key information about the successes/failures of your device‚Äôs connectivity like seen in Figure 1.</description></item><item><title/><link>https://apdingman.github.io/about-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://apdingman.github.io/about-me/</guid><description>About Me IoT architect with experience across consulting, high-growth organizations (through an IPO), and well-established manufacturers.
Motivated by working with systems that are or soon will operate at tremendous scale and that have a direct human impact.
Equally engaged by conversation around technical design, business objectives, or how to attract, grow, and retain the best talent.
Domains I‚Äôm passionate about:
Internet of Things (IoT) Industrial Internet of Things (IIoT) Fleet Management / Over the Air Firmware Updates (OTA) DevOps Infrastructure as Code (IaC) Serverless Architectures API Development Monitoring, Alerting, Logging, and other instrumentation systems Favorite AWS Services</description></item><item><title>My Favorite Tweets</title><link>https://apdingman.github.io/tweets/my-fav-tweets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://apdingman.github.io/tweets/my-fav-tweets/</guid><description>Serverless I still see this a lot in the wild, so I&amp;#39;ll reiterate: please deploy your stateless and stateful resources in separate CloudFormation stacks
this will give you the flexibility to update your stateless resources (typically code) often without touching your databases and stores
&amp;mdash; Boris Tane üçã (@boristane) October 30, 2022</description></item></channel></rss>